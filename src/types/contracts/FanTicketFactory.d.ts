/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FanTicketFactoryInterface extends ethers.utils.Interface {
  functions: {
    "BASED_ON()": FunctionFragment;
    "CREATION_PERMIT_TYPEHASH()": FunctionFragment;
    "NETWORK_ADMIN_ROLE()": FunctionFragment;
    "computeAddress(string,string)": FunctionFragment;
    "computeCreationCodeWithArgs(string,string)": FunctionFragment;
    "managerRegistry()": FunctionFragment;
    "newFanTicket(string,string,address,uint256,uint32,uint8,bytes32,bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "salt()": FunctionFragment;
    "symbolToAddress(string)": FunctionFragment;
    "tokenCreationCode()": FunctionFragment;
    "tokenIdToAddress(uint32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BASED_ON", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CREATION_PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NETWORK_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "computeCreationCodeWithArgs",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "managerRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newFanTicket",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "salt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "symbolToAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenCreationCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdToAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "BASED_ON", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CREATION_PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NETWORK_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeCreationCodeWithArgs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newFanTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "salt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "symbolToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenCreationCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "NewFanTicket(string,string,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewFanTicket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class FanTicketFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FanTicketFactoryInterface;

  functions: {
    BASED_ON(overrides?: CallOverrides): Promise<[string]>;

    CREATION_PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    NETWORK_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    computeAddress(
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<[string] & { predictedAddress: string }>;

    computeCreationCodeWithArgs(
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<[string] & { result: string }>;

    managerRegistry(overrides?: CallOverrides): Promise<[string]>;

    newFanTicket(
      name: string,
      symbol: string,
      owner: string,
      initialSupply: BigNumberish,
      tokenId: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    salt(overrides?: CallOverrides): Promise<[string]>;

    symbolToAddress(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    tokenCreationCode(overrides?: CallOverrides): Promise<[string]>;

    tokenIdToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BASED_ON(overrides?: CallOverrides): Promise<string>;

  CREATION_PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  NETWORK_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  computeAddress(
    _name: string,
    _symbol: string,
    overrides?: CallOverrides
  ): Promise<string>;

  computeCreationCodeWithArgs(
    _name: string,
    _symbol: string,
    overrides?: CallOverrides
  ): Promise<string>;

  managerRegistry(overrides?: CallOverrides): Promise<string>;

  newFanTicket(
    name: string,
    symbol: string,
    owner: string,
    initialSupply: BigNumberish,
    tokenId: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  salt(overrides?: CallOverrides): Promise<string>;

  symbolToAddress(arg0: string, overrides?: CallOverrides): Promise<string>;

  tokenCreationCode(overrides?: CallOverrides): Promise<string>;

  tokenIdToAddress(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASED_ON(overrides?: CallOverrides): Promise<string>;

    CREATION_PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    NETWORK_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    computeAddress(
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    computeCreationCodeWithArgs(
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    managerRegistry(overrides?: CallOverrides): Promise<string>;

    newFanTicket(
      name: string,
      symbol: string,
      owner: string,
      initialSupply: BigNumberish,
      tokenId: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    salt(overrides?: CallOverrides): Promise<string>;

    symbolToAddress(arg0: string, overrides?: CallOverrides): Promise<string>;

    tokenCreationCode(overrides?: CallOverrides): Promise<string>;

    tokenIdToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    NewFanTicket(
      symbol?: string | null,
      name?: null,
      tokenAddress?: null
    ): TypedEventFilter<
      [string, string, string],
      { symbol: string; name: string; tokenAddress: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    BASED_ON(overrides?: CallOverrides): Promise<BigNumber>;

    CREATION_PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    NETWORK_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    computeAddress(
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeCreationCodeWithArgs(
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    managerRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    newFanTicket(
      name: string,
      symbol: string,
      owner: string,
      initialSupply: BigNumberish,
      tokenId: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    salt(overrides?: CallOverrides): Promise<BigNumber>;

    symbolToAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenCreationCode(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIdToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASED_ON(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CREATION_PERMIT_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NETWORK_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeAddress(
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeCreationCodeWithArgs(
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    managerRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newFanTicket(
      name: string,
      symbol: string,
      owner: string,
      initialSupply: BigNumberish,
      tokenId: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    salt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbolToAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenCreationCode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenIdToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
